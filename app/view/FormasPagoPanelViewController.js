/*
 * File: app/view/FormasPagoPanelViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Entregas100Web.view.FormasPagoPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.formaspagopanel',

    onBtnRefrescarClick: function(button, e, eOpts) {
        var me = this;

        me.getStore("FormasPagoLocalStore").load();
        me.getStore("CombinacionesFormaPagoLocalStore").load();
    },

    onFormasPagoGridSelect: function(rowmodel, record, index, eOpts) {
        var me = this,
            combinacionesFormaPagoLocalStore = me.getStore("CombinacionesFormaPagoLocalStore"),
            combinacionesFormaPlazaLocalStore = me.getStore("CombinacionesFormaPlazaLocalStore");

        combinacionesFormaPagoLocalStore.removeFilter("forma-seleccionada");
        combinacionesFormaPagoLocalStore.addFilter([
        {
            id: "forma-seleccionada",
            property: "forma_pago_id",
            value: record.get("id"),
            exactMatch: true
        }
        ]);

        combinacionesFormaPlazaLocalStore.removeFilter("forma-seleccionada");
        combinacionesFormaPlazaLocalStore.addFilter([
        {
            id: "forma-seleccionada",
            property: "forma_pago_id",
            value: record.get("id"),
            exactMatch: true
        }
        ]);
    },

    onBtnAgregarCombinacionClick: function(button, e, eOpts) {
        var me = this,
            formasPagoLocalStore = me.getStore("FormasPagoLocalStore"),
            combinacionesFormaPagoLocalStore = me.getStore("CombinacionesFormaPagoLocalStore"),
            formaPagoRecord = me.view.down("#formasPagoGrid").getSelection()[0],
            formPagoDialog, formasCombinadas, waitWindow;

        // si no ha sido seleccionada una forma de pago a la cual agregar la combinacion
        if (!formaPagoRecord) {
            Ext.Msg.show({
                title: "Mensaje del sistema",
                message: "Seleccione una forma de pago",
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.ERROR
            });
            return;
        }


        // se guardan los ids de las formas ya combinadas para evitar duplicidad
        formasCombinadas = combinacionesFormaPagoLocalStore.getData().getValues("forma_pago_id2", "data");
        formasCombinadas.push(formaPagoRecord.get("id"));

        // muestra el dialogo para seleccionar la forma de pago
        formPagoDialog = Ext.create("Pyansa.window.dialog.ComboBox", {
            title: "Seleccione una forma de pago",
            field: {
                fieldLabel: "Forma de Pago",
                store: Ext.create("Entregas100Web.store.FormasPagoStore", {
                    filters: [
                    {
                        id: "formas-restantes",
                        filterFn: function(record) {
                            return !Ext.Array.contains(formasCombinadas, record.get("id"));
                        }
                    }
                    ]
                }),
                valueField: "id",
                displayField: "descripcion"
            },
            listeners: {
                accept: onFormaPagoSeleccionada
            }
        });

        function onFormaPagoSeleccionada(value, combo) {
            waitWindow = Ext.Msg.wait("Guardando cambios...");
            this.close();

            // guarda la combinacion en el store y lo sync
            combinacionesFormaPagoLocalStore.add([
            {
                forma_pago_id: formaPagoRecord.get("id"),
                forma_pago_id2: value,
                forma_pago_descripcion: formaPagoRecord.get("descripcion"),
                forma_pago_descripcion2: combo.getDisplayValue()
            },
            {
                forma_pago_id: value,
                forma_pago_id2: formaPagoRecord.get("id"),
                forma_pago_descripcion: combo.getDisplayValue(),
                forma_pago_descripcion2: formaPagoRecord.get("descripcion")
            }
            ]);
            combinacionesFormaPagoLocalStore.sync({
                success: onSyncSuccess
            });
        }

        function onSyncSuccess() {
            waitWindow.close();
        }
    },

    onBtnAgregarPlazaClick: function(button, e, eOpts) {
        var me = this,
            plazasStore = Ext.create("Entregas100Web.store.PlazasStore", {}),
            combinacionesFormaPlazaLocalStore = me.getStore("CombinacionesFormaPlazaLocalStore"),
            formaPagoRecord = me.view.down("#formasPagoGrid").getSelection()[0],
            plazaDialog, plazasCombinadas, waitWindow;

        // si no ha sido seleccionada una forma de pago a la cual agregar la combinacion
        if (!formaPagoRecord) {
            Ext.Msg.show({
                title: "Mensaje del sistema",
                message: "Seleccione una forma de pago",
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.ERROR
            });
            return;
        }

        // se guardan los ids de las plazas ya combinadas para evitar duplicidad
        plazasCombinadas = combinacionesFormaPlazaLocalStore.getData().getValues("plaza_id", "data");
        plazasStore.addFilter([
        {
            id: "plazas-restantes",
            filterFn: function(record) {
                return !Ext.Array.contains(plazasCombinadas, record.get("id"));
            }
        }
        ]);

        // muestra el dialogo para seleccionar la forma de pago
        plazaDialog = Ext.create("Pyansa.window.dialog.ComboBox", {
            title: "Seleccione una plaza",
            field: {
                fieldLabel: "Plaza",
                store: plazasStore,
                valueField: "id",
                displayField: "ciudad"
            },
            listeners: {
                accept: onPlazaSeleccionada
            }
        });

        function onPlazaSeleccionada(value, combo) {
            waitWindow = Ext.Msg.wait("Guardando cambios...");
            this.close();

            // guarda la combinacion en el store y lo sync
            combinacionesFormaPlazaLocalStore.add([
            {
                forma_pago_id: formaPagoRecord.get("id"),
                forma_pago: formaPagoRecord.get("descripcion"),
                plaza_id: value,
                plaza: combo.getDisplayValue()
            }
            ]);
            combinacionesFormaPlazaLocalStore.sync({
                success: onSyncSuccess
            });
        }

        function onSyncSuccess() {
            waitWindow.close();
        }
    },

    onFormasPagoPanelBeforeRender: function(component, eOpts) {
        var me = this,
            combinacionesFormaPagoLocalStore = me.getStore("CombinacionesFormaPagoLocalStore"),
            combinacionesFormaPlazaLocalStore = me.getStore("CombinacionesFormaPlazaLocalStore");

        // inicialmente no se muestra ninguna combinacion ya que ninguna forma de pago ha
        // sido seleccionada
        combinacionesFormaPagoLocalStore.addFilter([
        {
            id: "forma-seleccionada",
            fn: function () {
                return false;
            }
        }
        ]);
        combinacionesFormaPlazaLocalStore.addFilter([
        {
            id: "forma-seleccionada",
            fn: function () {
                return false;
            }
        }
        ]);
    }

});
