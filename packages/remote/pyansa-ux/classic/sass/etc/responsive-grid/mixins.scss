/// Grid system
//
// Generate semantic grid columns with these mixins.
@mixin make-row() {
    display: flex;
    flex-wrap: wrap;
    margin-right: ($grid-gutter-width / -2);
    margin-left: ($grid-gutter-width / -2);
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: $size / $columns;
    margin-left: if($num == 0, 0, percentage($num));
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
    // Common properties for all breakpoints
    %grid-column {
        position: relative;
        width: 100%;
        min-height: 1px; // Prevent columns from collapsing when empty
        padding-right: ($gutter / 2);
        padding-left: ($gutter / 2);
    }

    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);

        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $columns {
            .col#{$infix}-#{$i} {
                @extend %grid-column;
            }
        }
        .col#{$infix},
        .col#{$infix}-auto {
            @extend %grid-column;
        }

        @include media-breakpoint-up($breakpoint, $breakpoints) {
            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            .col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }
            .col#{$infix}-auto {
                flex: 0 0 auto;
                width: auto;
                max-width: none; // Reset earlier grid tiers
            }

            @for $i from 1 through $columns {
                .col#{$infix}-#{$i} {
                    @include make-col($i, $columns);
                }
            }

            .order#{$infix}-first { order: -1; }

            .order#{$infix}-last { order: $columns + 1; }

            @for $i from 0 through $columns {
                .order#{$infix}-#{$i} { order: $i; }
            }

            // `$columns - 1` because offsetting by the width of an entire row isn't possible
            @for $i from 0 through ($columns - 1) {
                @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
                    .offset#{$infix}-#{$i} {
                        @include make-col-offset($i, $columns);
                    }
                }
            }
        }
    }
}

//
// Utilities for common `display` values
//
@mixin make-display-utilities() {
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

            .d#{$infix}-none         { display: none !important; }
            .d#{$infix}-inline       { display: inline !important; }
            .d#{$infix}-inline-block { display: inline-block !important; }
            .d#{$infix}-block        { display: block !important; }
            .d#{$infix}-table        { display: table !important; }
            .d#{$infix}-table-row    { display: table-row !important; }
            .d#{$infix}-table-cell   { display: table-cell !important; }
            .d#{$infix}-flex         { display: flex !important; }
            .d#{$infix}-inline-flex  { display: inline-flex !important; }
        }
    }
}

// Flex variation
//
// Custom styles for additional flex alignment options.
@mixin make-flex-utilities() {
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

            .flex#{$infix}-row            { flex-direction: row !important; }
            .flex#{$infix}-column         { flex-direction: column !important; }
            .flex#{$infix}-row-reverse    { flex-direction: row-reverse !important; }
            .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }

            .flex#{$infix}-wrap         { flex-wrap: wrap !important; }
            .flex#{$infix}-nowrap       { flex-wrap: nowrap !important; }
            .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }
            .flex#{$infix}-fill         { flex: 1 1 auto !important; }
            .flex#{$infix}-grow-0       { flex-grow: 0 !important; }
            .flex#{$infix}-grow-1       { flex-grow: 1 !important; }
            .flex#{$infix}-shrink-0     { flex-shrink: 0 !important; }
            .flex#{$infix}-shrink-1     { flex-shrink: 1 !important; }

            .justify-content#{$infix}-start   { justify-content: flex-start !important; }
            .justify-content#{$infix}-end     { justify-content: flex-end !important; }
            .justify-content#{$infix}-center  { justify-content: center !important; }
            .justify-content#{$infix}-between { justify-content: space-between !important; }
            .justify-content#{$infix}-around  { justify-content: space-around !important; }

            .align-items#{$infix}-start    { align-items: flex-start !important; }
            .align-items#{$infix}-end      { align-items: flex-end !important; }
            .align-items#{$infix}-center   { align-items: center !important; }
            .align-items#{$infix}-baseline { align-items: baseline !important; }
            .align-items#{$infix}-stretch  { align-items: stretch !important; }

            .align-content#{$infix}-start   { align-content: flex-start !important; }
            .align-content#{$infix}-end     { align-content: flex-end !important; }
            .align-content#{$infix}-center  { align-content: center !important; }
            .align-content#{$infix}-between { align-content: space-between !important; }
            .align-content#{$infix}-around  { align-content: space-around !important; }
            .align-content#{$infix}-stretch { align-content: stretch !important; }

            .align-self#{$infix}-auto     { align-self: auto !important; }
            .align-self#{$infix}-start    { align-self: flex-start !important; }
            .align-self#{$infix}-end      { align-self: flex-end !important; }
            .align-self#{$infix}-center   { align-self: center !important; }
            .align-self#{$infix}-baseline { align-self: baseline !important; }
            .align-self#{$infix}-stretch  { align-self: stretch !important; }
        }
    }
}
